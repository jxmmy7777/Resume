{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from PIL import Image\n",
    "import os\n",
    "import numpy as np\n",
    "from tempfile import mkdtemp\n",
    "import os.path as path\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import theano\n",
    "import keras\n",
    "import traceback\n",
    "from keras.models import Sequential\n",
    "from scipy.misc import imread, imresize, imsave\n",
    "from keras.layers.core import Flatten, Dense, Dropout,Activation\n",
    "from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D,UpSampling2D,UpSampling1D,Cropping2D\n",
    "from keras.optimizers import SGD\n",
    "from keras.utils.np_utils import to_categorical\n",
    "%matplotlib inline\n",
    "from keras import backend as K\n",
    "from keras.utils import np_utils\n",
    "K.set_image_dim_ordering('th')\n",
    "import traceback\n",
    "from scipy import ndimage\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from keras import callbacks\n",
    "import glob\n",
    "from shutil import copyfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def imageResize(basename,imageName):\n",
    "    \"\"\"\n",
    "    resize image\n",
    "    basename : eg. /home/username/XYZFolder\n",
    "    image name : xyz.jpg\n",
    "    New folder in the working directory will be created with '_resized' as suffix\n",
    "    \"\"\"\n",
    "    new_width  = 128\n",
    "    new_height = 128\n",
    "    try:  \n",
    "        img = Image.open(basename+\"/\"+imageName) # image extension *.png,*.jpg\n",
    "        img = img.resize((new_width, new_height), Image.ANTIALIAS)\n",
    "        img.save(basename+'_resized/'+imageName)\n",
    "    except:\n",
    "        os.mkdir(basename+'_resized/')\n",
    "        img = Image.open(basename+\"/\"+imageName) # image extension *.png,*.jpg\n",
    "        img = img.resize((new_width, new_height), Image.ANTIALIAS)\n",
    "        img.save(basename+'_resized/'+imageName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def resizer(folderPath):\n",
    "    \"\"\"\n",
    "    to resize all files present in a folder\n",
    "    resizer('/home/username/XYZFolder')\n",
    "    \"\"\"\n",
    "    \n",
    "    for subdir, dirs, files in os.walk(folderPath):\n",
    "        for fileName in files:\n",
    "            try:\n",
    "#                 print os.path.join(subdir, file)\n",
    "                filepath = subdir + os.sep + fileName\n",
    "#                 print filepath\n",
    "                if filepath.endswith(\".jpg\" or \".jpeg\" or \".png\" or \".gif\"):\n",
    "                    imageResize(subdir,fileName)\n",
    "            except:\n",
    "                print traceback.print_exc()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# resizer('imdb_crop')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def load_image( infilename ) :\n",
    "    img = ndimage.imread( infilename )\n",
    "    data = np.asarray( img, dtype=\"int32\" )\n",
    "    resized = data.reshape(data.shape[2],data.shape[0],data.shape[1])\n",
    "    return resized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# some precautionary functions\n",
    "def loadImageTest(fileName):\n",
    "    \"\"\"\n",
    "    imdb database contain many images which are not in proper format, Due to format issue, fails to load raising an exception.\n",
    "    To prevent such incidents, images are checked, if loads propely then only taken, else not considered\n",
    "    \"\"\"\n",
    "    try:\n",
    "        load_image(fileName)\n",
    "        return 1\n",
    "    except :\n",
    "        return 0\n",
    "    \n",
    "def responseTest(diff):\n",
    "    \"\"\"\n",
    "    all image names do not obey regex => r'nm*\\d+_rm\\d+_(\\d+)-\\d+-\\d+_(\\d+).jpg'\n",
    "    possible reasons are as given below:\n",
    "    1) no having proper format for naming\n",
    "    2) due to naming error, sometime age are shown above 100 years, which is not valid for class size we have selected\n",
    "    \n",
    "    Images not satisfing age criterion are omitted\n",
    "    \"\"\"\n",
    "    try:\n",
    "        if diff > 0 and diff <= 100:\n",
    "            return 1\n",
    "    except:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def turnToNumpy(files):\n",
    "    \"\"\"\n",
    "    turn stored images on disk to numpy\n",
    "    turnToNumpy('/home/username/XYZFolder/\n",
    "    \"\"\"\n",
    "    temp = []\n",
    "    y = []\n",
    "    print \"Total Count of Files\",len(files)\n",
    "    responseArray = []\n",
    "    for fileName in files:\n",
    "                try:\n",
    "                    if fileName.endswith(\".jpg\" or \".jpeg\" or \".png\"):\n",
    "                        \n",
    "                        matchObj = re.search( r'nm*\\d+_rm\\d+_(\\d+)-\\d+-\\d+_(\\d+).jpg', fileName, re.M|re.I)\n",
    "                        # yob - year of birth\n",
    "                        # dopt - date of photo taken\n",
    "                        yob =  matchObj.group(1)\n",
    "                        dopt =  matchObj.group(2)\n",
    "#                         print yob,dopt, int(dopt)-int(yob)\n",
    "                        diff  = int(dopt)-int(yob)\n",
    "                        if int(diff) > 0 and int(diff) <100:\n",
    "#                             print type(int(dopt)-int(yob)),diff,diff > 0\n",
    "                            individualResponse = [0]*100\n",
    "                            individualResponse[diff] =1 \n",
    "                            responseArray.append(individualResponse)\n",
    "#                             responseArray.append(diff/100)\n",
    "                            temp.append(load_image(fileName))\n",
    "#                             y.append(abs(int(dopt)-int(yob)))\n",
    "                except:\n",
    "                    \"\"\n",
    "    return np.asarray(temp, dtype='float32'),np.asarray(responseArray, dtype='bool')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# defining convolutional network\n",
    "model = Sequential()\n",
    "model.add(ZeroPadding2D((1,1),input_shape=(3,128,128)))\n",
    "model.add(Convolution2D(64, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(64, 3, 3, activation='relu'))\n",
    "model.add(MaxPooling2D((2,2)))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(128, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(128, 3, 3, activation='relu'))\n",
    "model.add(MaxPooling2D((2,2)))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(256, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(256, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(256, 3, 3, activation='relu'))\n",
    "model.add(MaxPooling2D((2,2)))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(MaxPooling2D((2,2)))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(ZeroPadding2D((1,1)))\n",
    "model.add(Convolution2D(512, 3, 3, activation='relu'))\n",
    "model.add(MaxPooling2D((2,2)))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(4090, activation='relu'))\n",
    "model.add(Dense(4090, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(100, activation='softmax'))\n",
    "# model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# this function will load images iteratively in memory \n",
    "# CPU and GPU memory friendly iterator\n",
    "def myGeneratorEX(samples_per_epoch,epoch):\n",
    "    \"\"\"\n",
    "    samples_per_epoch : number of images to be loaded in CPU memory at a time\n",
    "    epoch : number of epochs for training \n",
    "    \"\"\"\n",
    "    # defining optimizer function\n",
    "    sgd = SGD(lr=0.01, momentum=0.1, decay=0.0, nesterov=True)\n",
    "    # compiling model\n",
    "    model.compile(optimizer=sgd, loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "    \n",
    "    \n",
    "    folderName = \"imdb_crop_resized\" # folder name where resized images are placed\n",
    "    \n",
    "    fileNames =  glob.glob(folderName+\"/*.jpg\")#All file names with .jpg extension\n",
    "    \n",
    "    # first 100 imageswill be ued for onthe fly visual performace checking at each iteration\n",
    "    initialFileNames = fileNames[:100]\n",
    "\n",
    "    k =0 \n",
    "    while k < epoch: # for each epoch do following\n",
    "        print \"Epoch : \",k,\" | Total Images : \",len(fileNames)\n",
    "        for i in range(len(fileNames)/samples_per_epoch): \n",
    "            #All files (~438189) are loaded in memory with batch of size  'samples_per_epoch' e.g.1000\n",
    "            try:\n",
    "                # loaded images are converted to numpy array\n",
    "                x_batch,y_batch = turnToNumpy(fileNames[i*samples_per_epoch:(i+1)*samples_per_epoch])\n",
    "\n",
    "                # such all images are made up of numpy array of range integer 0 - 255(8 bit image)\n",
    "                # all images are normalised between 0-1 float\n",
    "                x_batch = x_batch/255.0\n",
    "            \n",
    "                # to check wheather or not our algorithm is learning. to cheack wheather our algorith started differentiating between age.\n",
    "                x_batch_test,y_batch_test = turnToNumpy(initialFileNames)\n",
    "                x_batch_test = x_batch_test/255.0\n",
    "                \n",
    "                # fit the data on model\n",
    "                model.fit(x_batch,y_batch,batch_size=50,nb_epoch=1, verbose=1,validation_split=0.2)\n",
    "                # test on initial 100 files at each iteration\n",
    "                test_output = model.predict_classes(x_batch_test)\n",
    "                print test_output\n",
    "            except IndexError:\n",
    "                print traceback.print_exc()\n",
    "        k = k+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "myGeneratorEX(10000,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# save model\n",
    "# model.save_weights(\"modelWith128and100epoch\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# load model\n",
    "# model.load_weights(\"modelWith256and25epoch\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def getRealAge(fileName):\n",
    "    \"\"\"\n",
    "    To get real age from file name\n",
    "    \"\"\"\n",
    "    matchObj = re.search(r'nm*\\d+_rm\\d+_(\\d+)-\\d+-\\d+_(\\d+).jpg', eachFilename, re.M | re.I)\n",
    "    yob =  matchObj.group(1)\n",
    "    dopt =  matchObj.group(2)\n",
    "    #print yob,dopt, int(dopt)-int(yob)\n",
    "    diff  = int(dopt)-int(yob)\n",
    "    return diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#testing \n",
    "folderName = \"imdb_crop_resized128*128\" \n",
    "fileNames =  glob.glob(folderName+\"/*.jpg\")\n",
    "NumberOfFileToBetested = 500\n",
    "\n",
    "# First 500 file will be taken for testing\n",
    "x_batch,y_batch = turnToNumpy(fileNames[:NumberOfFileToBetested])\n",
    "predictedAGE = model.predict_classes(x_batch)\n",
    "realAGE = []\n",
    "imagesCount = 0\n",
    "os.mkdir('testImages')\n",
    "\n",
    "for eachFilename in fileNames[:NumberOfFileToBetested]:\n",
    "    realAGE = getRealAge(eachFilename)\n",
    "    #saving Images\n",
    "#     print eachFilename\n",
    "    x = load_image(eachFilename)\n",
    "#     print x.shape #(3, 128, 128)\n",
    "    x = x.reshape(x.shape[1],x.shape[2],x.shape[0])\n",
    "    renamedImage = \"testImages/\"+str(realAGE)+\"_\"+str(predictedAGE[imagesCount])+\".jpg\"\n",
    "#     print (renamedImage)                                             \n",
    "    imsave(renamedImage, x)\n",
    "    imagesCount = imagesCount + 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2.0
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}